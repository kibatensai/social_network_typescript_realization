{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","DialogItem","id","name","path","className","Message","message","maxLength50","maxLengthCreator","Textarea","Element","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","placeholder","Dialogs","dialogsPage","sendMessage","dialogElements","dialogData","map","i","messagesElements","messageData","m","values","newMessageBody","connector","dispatch","sendMessageCreator","compose"],"mappings":"0MAKMA,EAA6B,SAACC,GAAD,MAA0B,CACzDC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAAmBC,GAQ/C,OAFuCC,YAAQN,EAARM,EALb,SAACC,GACvB,OAAKA,EAAML,OACJ,cAACG,EAAD,eAAeE,IADI,cAAC,IAAD,CAAUC,GAAG,gB,2JCUhCC,EAXI,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,KACjBC,EAAO,YAAcF,EAEzB,OACI,qBAAKG,UAAU,SAAf,SACI,cAAC,IAAD,CAASL,GAAII,EAAb,SAAoBD,OCHjBG,G,OAJC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACf,OAAO,qBAAKF,UAAU,UAAf,SAA0BE,M,oCC2B/BC,EAAcC,YAAiB,IAC/BC,EAAWC,YAAQ,YAYnBC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAVL,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWR,EACXS,SAAW,CAACC,IAAUZ,GAAeL,KAAK,iBAAiBkB,YAAY,uBAC9E,gDAOGC,EAxCC,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,YAExBC,EACAF,EAAYG,WAAWC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBzB,KAAMyB,EAAEzB,KAAMD,GAAI0B,EAAE1B,IAA1B0B,EAAE1B,OACnD2B,EACAN,EAAYO,YAAYH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBxB,QAASwB,EAAExB,QAASL,GAAI6B,EAAE7B,IAAhC6B,EAAE7B,OAOrD,OACI,sBAAKG,UAAU,UAAf,UACI,qBAAKA,UAAU,gBAAf,SACKoB,IAEL,qBAAKpB,UAAU,WAAf,SACKwB,IAEL,cAACjB,EAAD,CAAqBG,SAZP,SAACiB,GACnBR,EAAYQ,EAAOC,uB,yBCOrBC,EAAYpC,aAfI,SAACL,GACnB,MAAO,CACH8B,YAAa9B,EAAM8B,gBAGF,SAACY,GACtB,MAAO,CACHX,YAAa,SAACS,GACVE,EAASC,YAAmBH,SAYzBI,sBACXH,EACAtC,IAFWyC,CAGbf","file":"static/js/4.cd650521.chunk.js","sourcesContent":["import { ComponentType } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AppStateType } from \"../redux/redux-store\"\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = <P extends object>(Component: ComponentType<P>) => {\r\n    const RedirectComponent = (props: any) => {\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        return <Component {...props} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react'\r\nimport './DialogItem.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nconst DialogItem = ({id, name}: DialogItemType) => {\r\n    let path = '/dialogs/' + id\r\n\r\n    return (\r\n        <div className='dialog'>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem","import React from 'react'\r\nimport './Message.css'\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message = ({ message }: MessageType) => {\r\n    return <div className=\"message\">{message}</div>\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport './Dialogs.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { DialogsConnectorPropsType } from './DialogsContainer'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Element } from '../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\n\r\n\r\n\r\nconst Dialogs = ({ dialogsPage, sendMessage }: DialogsConnectorPropsType) => {\r\n\r\n    let dialogElements =\r\n        dialogsPage.dialogData.map(i => <DialogItem key={i.id} name={i.name} id={i.id}/>)\r\n    let messagesElements =\r\n        dialogsPage.messageData.map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n\r\n    const addNewMessage = (values: any) => {\r\n        sendMessage(values.newMessageBody)\r\n    }\r\n    \r\n    return (\r\n        <div className='dialogs'>\r\n            <div className='dialogs-items'>\r\n                {dialogElements}\r\n            </div>\r\n            <div className='messages'>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst Textarea = Element('textarea')\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   validate={ [required, maxLength50] } name='newMessageBody' placeholder='Enter your message' />\r\n            <button>send</button>\r\n        </form>\r\n )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React, { Dispatch } from 'react'\r\nimport './Dialogs.css'\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport type DialogsConnectorPropsType = ConnectedProps<typeof connector>\r\n\r\nconst connector = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)\r\n\r\nexport default compose(\r\n    connector,\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}