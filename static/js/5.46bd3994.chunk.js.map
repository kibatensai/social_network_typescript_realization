{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ws","WebSocket","Chat","Messages","AddMessageForm","useState","messages","setMessages","useEffect","addEventListener","e","newMessages","JSON","parse","data","prevMessages","removeEventListener","mappedMessages","map","m","i","Message","message","style","height","overflowY","src","photo","alt","width","userName","setMessage","value","onChange","currentTarget","onClick","send","ChatPage","isAuth","useSelector","state","auth","to"],"mappings":"gMAKMA,EAAK,IAAIC,UAAU,gEAyBnBC,EAAW,WACb,OACI,qCACI,cAACC,EAAD,IACA,cAACC,EAAD,QAKND,EAAe,WAAO,IAAD,EAEQE,mBAA4B,IAFpC,mBAEhBC,EAFgB,KAENC,EAFM,KAIvBC,qBAAU,WAKN,OAJAR,EAAGS,iBAAiB,WAAW,SAACC,GAC5B,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,UAEhD,WACHX,EAAGgB,oBAAoB,WAAW,kBAEvC,IAEH,IAAMC,EAAiBX,EAASY,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACC,EAAD,CAASC,QAASH,GAAQC,MAExE,OACI,qBAAKG,MAAO,CAACC,OAAQ,QAASC,UAAW,QAAzC,SACKR,KAMPI,EAA0C,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC9C,OACI,gCACI,qBAAKI,IAAKJ,EAAQK,MAAOC,IAAI,GAAGL,MAAO,CAACM,MAAO,UADnD,IAC8D,4BAAIP,EAAQQ,WACtE,uBACCR,EAAQA,QACV,2BAMLlB,EAAqB,WAAO,IAAD,EAECC,mBAAS,IAFV,mBAEtBiB,EAFsB,KAEbS,EAFa,KAU7B,OACI,qCACA,8BACI,0BAAUC,MAAOV,EAASW,SAAU,SAACvB,GAAD,OAAOqB,EAAWrB,EAAEwB,cAAcF,YAE1E,8BACI,wBAAQG,QAZI,WACZb,IACJtB,EAAGoC,KAAKd,GACRS,EAAW,MASP,wBAMGM,UAnFM,WAEjB,IAAMC,EAASC,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAEtE,OACI,mCACKA,EAEG,cAACpC,EAAD,IAEA,cAAC,IAAD,CAAUwC,GAAI","file":"static/js/5.46bd3994.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from \"react\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from './../../redux/redux-store'\r\n\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: FC = () => {\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    return (\r\n        <>\r\n            {isAuth\r\n                ?\r\n                <Chat />\r\n                :\r\n                <Redirect to={'/login'} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    return (\r\n        <>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </>\r\n    )\r\n}\r\n\r\nconst Messages: FC = () => {\r\n\r\n    const [messages, setMessages] =useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        ws.addEventListener('message', (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        })\r\n        return () => {\r\n            ws.removeEventListener('message', () => {})\r\n        }\r\n    }, [])\r\n\r\n    const mappedMessages = messages.map((m, i) => <Message message={m} key={i} />)\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}}>\r\n            {mappedMessages}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Message: FC<{message: ChatMessageType}> = ({message}) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} alt='' style={{width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n           <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageForm: FC = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n\r\n    const sendMessage = () => {\r\n        if(!message) return\r\n        ws.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <textarea value={message} onChange={(e) => setMessage(e.currentTarget.value)}></textarea>\r\n        </div>\r\n        <div>\r\n            <button onClick={sendMessage}>send</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}