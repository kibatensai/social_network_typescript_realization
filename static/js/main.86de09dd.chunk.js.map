{"version":3,"sources":["utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","components/common/FormsControls/FormsControls.tsx","redux/profile-reducer.ts","assets/images/usermockpng.png","redux/dialogs-reducer.ts","components/Users/Users.module.css","api/api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","utils/validators/object-helpers.js","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","App.jsx","reportWebVitals.js","index.js","components/common/FormsControls/FormsControls.module.css","assets/images/snpreloader.svg","components/common/Preloader/Preloader.tsx"],"names":["required","value","undefined","maxLengthCreator","maxLength","length","module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","style","formControl","children","Textarea","restProps","Input","Element","createField","placeholder","name","validators","component","text","validate","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","postData","id","postmsg","likesCount","profile","status","addPostActionCreator","newPostText","type","setStatus","getUserProfile","userId","dispatch","a","profileAPI","getProfile","response","data","getStatus","updateStatus","resultCode","savePhoto","file","photos","saveProfile","getState","auth","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","el","postId","SEND_MESSAGE","dialogData","messageData","message","sendMessageCreator","newMessageBody","dialogsReducer","body","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","follow","post","unfollow","delete","put","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","src","formSummaryError","Login","useDispatch","useSelector","to","Music","News","Settings","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionNumber","paginator","onClick","p","map","selectedPage","otherPage","User","user","isFollowingInProgress","small","userPhoto","alt","followed","disabled","some","getUsersFromState","usersPage","users","getPageSize","getTotalUsersCountFromState","totalUsersCount","getCurrentPageFromState","getIsFetchingFromState","isFetching","getIsFollowInProgressFromState","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","memo","onFilterChanged","enableReinitialize","initialValues","String","setSubmitting","isSubmitting","as","updateObjectInArray","items","itemId","objPropName","newObjProps","actions","count","requestUsers","totalCount","usersReducer","Users","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","followHanlder","unfollowHandler","u","UsersPage","pageTitle","Preloader","INITIALIZED_SUCCESS","initialized","appReducer","sidebarReducer","reducers","combineReducers","profilePage","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Header","Layout","span","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","App","catchAllUnhandledErrors","promiseRejectionEvent","console","log","this","initializeApp","addEventListener","removeEventListener","minHeight","padding","width","mode","defaultSelectedKeys","defaultOpenKeys","height","title","Item","LaptopOutlined","exact","path","render","fallback","textAlign","Component","AppContainer","withRouter","connect","promise","all","AppWrapper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","preloader"],"mappings":"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","file":"static/js/main.86de09dd.chunk.js","sourcesContent":["export const required = (value: any) => {\r\n   return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1UX_g\",\"otherPage\":\"Paginator_otherPage__2E7Ji\",\"selectedPage\":\"Paginator_selectedPage__3kUkN\"};","import React from 'react'\r\nimport { Field } from 'redux-form'\r\nimport style from './FormsControls.module.css'\r\n\r\n//@ts-ignore\r\nconst FormControl = ({input, meta, child, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Element = (Element: any) => ({ input, meta, ...props }: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n            <Element {...input} {...props} />\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props: any = {}, text: any = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props} /> {text}\r\n    </div>\r\n}","import { profileAPI } from './../api/api';\r\nimport { Dispatch } from 'react';\r\nimport { ProfileType } from './../types/types';\r\nimport { stopSubmit } from 'redux-form/lib/actions';\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE'\r\nconst SET_STATUS = 'SET-STATUS'\r\nconst DELETE_POST = 'DELETE-POST'\r\nconst SAVE_PHOTO_SUCCESS = 'SAVE-PHOTO-SUCCESS'\r\n\r\nexport type PostDataType = {\r\n    id: number\r\n    postmsg: string\r\n    likesCount: number\r\n}\r\n\r\nlet initialState = {\r\n    postData: [\r\n        { id: 1, postmsg: 'Its my first post', likesCount: 10 },\r\n        { id: 2, postmsg: 'Its my second post', likesCount: 15 },\r\n        { id: 3, postmsg: 'Its my third post', likesCount: 7 },\r\n    ] as Array<PostDataType>,\r\n    profile: null as any,\r\n    status: ''\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                postmsg: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postData: [...state.postData, newPost],\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                postData: state.postData.filter(el => el.id !== action.postId)\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return { ...state, profile: {...state.profile, photos: action.photos}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    newPostText: string\r\n}\r\n\r\ntype SetUserProfileActionCreatorType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: any\r\n}\r\n\r\ntype SetStatusActionCreatorType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\n\r\ntype DeletePostActionCreatorType = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\n\r\ntype SavePhotoSuccessActionCreatorType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: any\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ( {type: ADD_POST, newPostText} )\r\nexport const setUserProfile = (profile: any): SetUserProfileActionCreatorType => ( { type: SET_USER_PROFILE, profile } )\r\nexport const setStatus = (status: string): SetStatusActionCreatorType => ( { type: SET_STATUS, status } )\r\nexport const deletePost = (postId: number): DeletePostActionCreatorType => ( { type: DELETE_POST, postId } )\r\nexport const savePhotoSuccess = (photos: any): SavePhotoSuccessActionCreatorType => ( { type: SAVE_PHOTO_SUCCESS, photos } )\r\n\r\n\r\n// ---------- Thunks: ----------\r\n\r\nexport const getUserProfile = (userId: number) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n        const response =  await profileAPI.getProfile(userId)\r\n            dispatch(setUserProfile(response.data))\r\n\r\n    }\r\n\r\n\r\nexport const getStatus = (userId: number) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n\r\n            dispatch(setStatus(response.data))\r\n\r\n}\r\n\r\n\r\nexport const updateStatus = (status: string) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n        const response = await profileAPI.updateStatus(status)\r\n\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n        }\r\n\r\n}\r\n\r\nexport const savePhoto = (file: any) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n        const response = await profileAPI.savePhoto(file)\r\n\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n\r\n}\r\n\r\nexport const saveProfile = (profile: any) =>\r\n    async (dispatch: Dispatch<any>, getState: any) => {\r\n        const userId = getState().auth.userId\r\n        const response = await profileAPI.saveProfile(profile)\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}))\r\n            return Promise.reject(response.data.messages[0])\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/usermockpng.3b883e77.png\";","const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = { \r\n    dialogData: [\r\n        { id: 1, name: 'David' },\r\n        { id: 2, name: 'Mitch' },\r\n        { id: 3, name: 'Sodah' },\r\n        { id: 4, name: 'Reckful' },\r\n        { id: 5, name: 'Cdew' },\r\n        { id: 6, name: 'Eslint' },\r\n    ] as Array<DialogType>,\r\n    messageData: [\r\n        { id: 1, message: 'goodbye' },\r\n        { id: 2, message: 'well, maybe yes' },\r\n        { id: 3, message: 'you can ask me tomorrow' },\r\n        { id: 4, message: 'im so hungry' },\r\n        { id: 5, message: 'what about telling me whats going on' },\r\n        { id: 6, message: 'dobroho ranku ot ukrainianku' },\r\n    ] as Array<MessageType>\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody\r\n            return { \r\n                ...state,\r\n                messageData: [...state.messageData, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state\r\n        }\r\n}\r\n\r\ntype SendMessageCreatorType = {\r\n    type: typeof SEND_MESSAGE\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nexport const sendMessageCreator = (newMessageBody: string): SendMessageCreatorType => ({type: SEND_MESSAGE, newMessageBody})\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2ABsl\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY' : '5675685f-9cd0-43c9-b668-1f134f354acb'\r\n    }\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`), {\r\n            withCredentials: true\r\n        }).then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, { status })\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData()\r\n        formData.append('image', photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put(`profile`, profile)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: any = null) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe, captcha })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`)\r\n    }\r\n}","import { authAPI, securityAPI } from './../api/api';\r\nimport { Dispatch } from \"redux\"\r\nimport { stopSubmit } from 'redux-form'\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { AppStateType } from './redux-store';\r\n\r\nconst SET_USER_DATA = 'social-network/auth/SET-USER-DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'social-network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null // if null, then captcha is not required\r\n}\r\n\r\nexport type InitialAuthStateType = typeof initialState\r\n\r\nconst authReducer = (state = initialState, action: any): InitialAuthStateType => {\r\n\r\n    switch(action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n                }\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetUserDataACType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: DataObject\r\n}\r\ntype DataObject = {\r\n    userId: number | null,\r\n    email: string  | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\ntype GetCaptchaUrlSuccessACType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS\r\n    payload: {\r\n        captchaUrl: string\r\n    }\r\n}\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetUserDataACType => ({ type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessACType => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}})\r\n\r\n// ---------- Thunks: ----------\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<any>) => {\r\n        let response = await authAPI.me()\r\n\r\n        if(response.data.resultCode === 0) {\r\n            let { id, email, login } = response.data.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any): ThunkAction<void, AppStateType, unknown, any> => async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (response.data.resultCode === 10){\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            const message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error occured'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch<any>) => {\r\n    let response = await authAPI.logout()\r\n\r\n       if(response.data.resultCode === 0) {\r\n          dispatch(setAuthUserData(null, null, null, false))\r\n       }\r\n\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: Dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n\r\n}\r\n\r\nexport default authReducer","import React from 'react'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required } from '../../utils/validators/validators'\r\nimport { Element, createField } from '../common/FormsControls/FormsControls'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport style from '../../components/common/FormsControls/FormsControls.module.css'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst Input = Element('input')\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}: any) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'login'} name={'email'} component={Input}\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'} name={'password'} component={Input} type={'password'}\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input} /> remember me\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField('Symbols from image', 'captcha', [required], Input, {})}\r\n            <div>\r\n                { error && <div className={style.formSummaryError}>{error}</div> }\r\n                <button>Log In</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'login' })(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\n// type LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const captchaUrl = useSelector<AppStateType, any>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n    const onSubmit = (formData: any) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe,  formData.captcha))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { isAuth ?\r\n                <Redirect to={'/profile'} />\r\n                :\r\n                <div>\r\n                    <h1>LOGIN</h1>\r\n                    <span>You can use common test account credentials:</span>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                    <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './Music.css'\r\n\r\n\r\nconst Music = () => {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import React from 'react'\r\nimport './News.css'\r\n\r\n\r\nconst News = () => {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import React from 'react'\r\nimport './Settings.css'\r\n\r\n\r\nconst Settings = () => {\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import React, { useState } from 'react'\r\nimport style from './Paginator.module.css'\r\n\r\ntype PaginatorType = {\r\n    currentPage: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator = ({ currentPage, totalItemsCount, pageSize, onPageChanged, portionSize = 20 }: PaginatorType) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n        \r\n    let pages = []\r\n    for(let i=1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionNumber = portionNumber * portionSize\r\n\r\n    return ( \r\n            <>\r\n            <div className={style.paginator}>\r\n                {portionNumber > 1 && <button onClick={() => { setPortionNumber(portionNumber - 1)}}>PREV</button>}\r\n            <div>\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionNumber)\r\n                    .map( p => {\r\n                     return <span key={p} className={currentPage === p ? style.selectedPage : style.otherPage}\r\n                    onClick={() => onPageChanged(p)}>{p}</span>\r\n                })}\r\n            </div>\r\n                {portionCount >= portionNumber && <button onClick={() => { setPortionNumber(portionNumber + 1)}}>NEXT</button>}\r\n            </div>\r\n            </>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Users.module.css'\r\nimport userPhoto from '../../assets/images/usermockpng.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../types/types'\r\n\r\ntype UserComponentType = {\r\n    user: UserType\r\n    isFollowingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nexport const User = ({ user, isFollowingInProgress, unfollow, follow }: UserComponentType) => {\r\n\r\n    return (\r\n                <div>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={`/profile/` + user.id}>\r\n                            <img src={ user.photos.small !== null ? user.photos.small : userPhoto } alt='userpic' className={style.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            { user.followed \r\n                                        ? <button disabled={isFollowingInProgress.some(id => id === user.id)} onClick={ () => { unfollow(user.id)}}>Unfollow</button> \r\n                                        : <button disabled={isFollowingInProgress.some(id => id === user.id)} onClick={ () => { follow(user.id) }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>tut budet strana</div>\r\n                            <div>tut budet gorod</div>\r\n                        </span>\r\n                    </span>\r\n                </div>     \r\n    )\r\n}","import { UserType } from \"../types/types\"\r\n\r\nexport const getUsersFromState = (state: any): Array<UserType> => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: any) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCountFromState = (state: any) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPageFromState = (state: any) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetchingFromState = (state: any) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getIsFollowInProgressFromState = (state: any) => {\r\n    return state.usersPage.isFollowingInProgress\r\n}\r\n\r\nexport const getUsersFilter = (state: any) => {\r\n    return state.usersPage.filter\r\n}\r\n\r\n\r\n","import { Formik, Form, Field, ErrorMessage } from \"formik\"\r\nimport React, { FC, memo } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { FilterType } from \"../../redux/users-reducer\"\r\nimport { getUsersFilter } from \"../../redux/users-selectors\"\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = memo(({onFilterChanged}) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values : FormType, { setSubmitting }: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}>\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\" />\r\n                    <Field as=\"select\" name=\"friend\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only Followed</option>\r\n                        <option value=\"false\">Only Unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n           </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(i => {\r\n        if (i[objPropName] === itemId) {\r\n            return {...i, ...newObjProps}\r\n        }\r\n        return i\r\n    })\r\n}","import { Dispatch } from 'react';\r\nimport { usersAPI } from '../api/api';\r\nimport { UserType } from \"../types/types\"\r\nimport { updateObjectInArray } from '../utils/validators/object-helpers';\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 50,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>\r\n\r\nconst usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n\r\n    switch(action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return { ...state, users: action.users }\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return { ...state, currentPage: action.currentPage }\r\n        case 'SN/USERS/SET_USERS_TOTAL_COUNT':\r\n            return { ...state, totalUsersCount: action.count }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return { ...state, isFetching: action.isFetching }\r\n        case 'SN/USERS/SET_FILTER':\r\n            return {\r\n                ...state, filter: action.payload\r\n            }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return { ...state,\r\n                     isFollowingInProgress: action.isFetching\r\n                            ? [...state.isFollowingInProgress, action.userId]\r\n                            : state.isFollowingInProgress.filter(id => id !== action.userId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({ type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({ type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS', users }) as const,\r\n    setCurrentPage: (currentPage: number) => ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n    setUsersTotalCount: (totalUsersCount: number) => ({ type: 'SN/USERS/SET_USERS_TOTAL_COUNT', count: totalUsersCount } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS', isFetching, userId} as const),\r\n    setFilter: (filter: FilterType) => ({ type: 'SN/USERS/SET_FILTER', payload: filter } as const),\r\n}\r\n\r\n\r\n// ---------- Thunks: ----------\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType) =>\r\n    async (dispatch: Dispatch<ActionType>) => {\r\n\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        const response = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n            dispatch(actions.toggleIsFetching(false))\r\n            dispatch(actions.setUsers(response.items))\r\n            dispatch(actions.setUsersTotalCount(response.totalCount))\r\n\r\n}\r\n\r\n\r\nexport const follow = (userId: number) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        const response = await usersAPI.follow(userId)\r\n\r\n            if (response.data.resultCode === 0) {\r\n            dispatch(actions.followSuccess(userId))\r\n            }\r\n            dispatch(actions.toggleFollowingProgress(false, userId))\r\n\r\n}\r\n\r\n\r\nexport const unfollow = (userId: number) =>\r\n    async (dispatch: Dispatch<any>) => {\r\n\r\n        dispatch(actions.toggleFollowingProgress(true, userId))\r\n        const response = await usersAPI.unfollow(userId)\r\n\r\n            if (response.data.resultCode === 0) {\r\n            dispatch(actions.unfollowSuccess(userId))\r\n            }\r\n            dispatch(actions.toggleFollowingProgress(false, userId))\r\n\r\n}\r\n\r\n\r\nexport default usersReducer","import { FC, useEffect } from 'react'\r\nimport { Paginator } from '../common/Paginator/Paginator'\r\nimport { User } from './User'\r\nimport { UsersSearchForm } from './UsersSearchForm'\r\nimport { FilterType, requestUsers, follow, unfollow } from '../../redux/users-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCurrentPageFromState, getIsFollowInProgressFromState,\r\n    getPageSize, getTotalUsersCountFromState,\r\n    getUsersFilter, getUsersFromState } from '../../redux/users-selectors'\r\nimport { useHistory } from 'react-router'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {\r\n}\r\n\r\ntype QueryParamsType = {term?: string; page?: string; friend?: string}\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCountFromState)\r\n    const currentPage = useSelector(getCurrentPageFromState)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const users = useSelector(getUsersFromState)\r\n    const isFollowingInProgress = useSelector(getIsFollowInProgressFromState)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        if (!!parsed.friend) actualFilter = {...actualFilter, friend: parsed.friend === 'null' ? null : parsed.friend === 'true' ? true : false}\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = filter.friend\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (page: number) => {\r\n        dispatch(requestUsers(page, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const followHanlder = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const unfollowHandler = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n        </div>\r\n        <Paginator currentPage={currentPage}\r\n            onPageChanged={onPageChanged}\r\n            totalItemsCount={totalUsersCount}\r\n            pageSize={pageSize} />\r\n        {\r\n            users.map(u => <User key={u.id}\r\n                user={u}\r\n                isFollowingInProgress={isFollowingInProgress}\r\n                follow={followHanlder}\r\n                unfollow={unfollowHandler} />)\r\n        }\r\n    </div>\r\n    )\r\n\r\n}\r\n\r\n","import { FC } from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport { Users } from './Users'\r\nimport { Preloader } from '../common/Preloader/Preloader'\r\nimport { getIsFetchingFromState } from '../../redux/users-selectors'\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: FC<UsersPagePropsType> = ({pageTitle}) => {\r\n\r\n    const isFetching = useSelector(getIsFetchingFromState)\r\n\r\n    return (\r\n        <>\r\n            <h2>{pageTitle}</h2>\r\n            { isFetching ? <Preloader /> : null}\r\n            <Users />\r\n        </>\r\n    )\r\n}","import { Dispatch } from \"redux\"\r\nimport { getAuthUserData } from \"./auth-reducer\"\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS'\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialAuthStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: any): InitialAuthStateType => {\r\n    \r\n    switch(action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n                }\r\n        default:\r\n            return state \r\n    }\r\n}\r\n\r\ntype SetInitializedACType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): SetInitializedACType => ({ type: INITIALIZED_SUCCESS})\r\n\r\n\r\n// ---------- Thunks: ----------\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch<any>) => {\r\n    const promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n\r\nexport default appReducer","\r\n\r\nlet initialState = {}\r\n\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport profileReducer from './profile-reducer'\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport sidebarReducer from './sidebar-reducer'\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunk from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype reducersType = typeof reducers\r\nexport type AppStateType = ReturnType<reducersType>\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)))\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import {\r\n   UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport { Avatar, Button, Col, Layout, Row } from 'antd';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logout } from \"../../redux/auth-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport './Header.css';\r\n\r\nexport const Header = (props: any) => {\r\n\r\n   const dispatch = useDispatch()\r\n   const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n   const login = useSelector<AppStateType, any>(state => state.auth.login)\r\n\r\n   const { Header } = Layout\r\n\r\n   const logoutCallback = () => {\r\n      dispatch(logout())\r\n   }\r\n\r\n   return (\r\n      <Header className=\"header\">\r\n         <Row>\r\n            <Col span={18}></Col>\r\n            {isAuth\r\n               ?\r\n               <>\r\n                  <Col span={1}>\r\n                     <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                  </Col>\r\n                  <Col span={5}>\r\n                     <Button onClick={logoutCallback}>Log Out</Button>\r\n                  </Col>\r\n               </>\r\n               :\r\n               <Col span={6}>\r\n                  <Button>\r\n                     <Link to={'/login'}>Login</Link>\r\n                  </Button>\r\n               </Col>\r\n            }\r\n\r\n         </Row>\r\n      </Header>\r\n   )\r\n}\r\n\r\n","import {\r\n  LaptopOutlined,\r\n  NotificationOutlined, UserOutlined\r\n} from \"@ant-design/icons\";\r\nimport { Breadcrumb, Layout, Menu } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport React, { Component, lazy, Suspense } from \"react\";\r\nimport { connect, Provider } from \"react-redux\";\r\nimport {\r\n  HashRouter,\r\n  Link, Redirect, Route,\r\n  Switch, withRouter\r\n} from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport \"./App.css\";\r\nimport { Preloader } from \"./components/common/Preloader/Preloader\";\r\nimport { Login } from \"./components/Login/Login\";\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport { UsersPage } from \"./components/Users/UsersContainer\";\r\nimport { initializeApp } from \"./redux/app-reducer\";\r\nimport store from \"./redux/redux-store\";\r\nimport { Header } from './components/Header/Header'\r\n\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Content, Footer, Sider } = Layout;\r\n\r\nconst DialogsContainer = lazy(() =>\r\n  import(\"./components/Dialogs/DialogsContainer\")\r\n);\r\nconst ProfileContainer = lazy(() =>\r\n  import(\"./components/Profile/ProfileContainer\")\r\n);\r\nconst ChatPage = lazy(() => import(\"./pages/Chat/ChatPage\"));\r\n\r\nclass App extends Component {\r\n  catchAllUnhandledErrors = (promiseRejectionEvent) => {\r\n    console.log(\"REST query error\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\r\n      \"unhandledrejection\",\r\n      this.catchAllUnhandledErrors\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    } else {\r\n      return (\r\n        <Layout style={{minHeight:\"100vh\"}}>\r\n        <Header />\r\n          <Content style={{ padding: \"50px 250px\" }}>\r\n            <Layout\r\n              className=\"site-layout-background\"\r\n              style={{ padding: \"24px 0\" }}\r\n            >\r\n              <Sider className=\"site-layout-background\" width={250}>\r\n                <Menu\r\n                  mode=\"inline\"\r\n                  defaultSelectedKeys={[\"1\"]}\r\n                  defaultOpenKeys={[\"sub1\"]}\r\n                  style={{ height: \"100%\" }}\r\n                >\r\n                  <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\r\n                    <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\r\n                    <Menu.Item key=\"2\"><Link to='/chat'>Chat</Link></Menu.Item>\r\n                    <Menu.Item key=\"3\"> <Link to='/dialogs'>Messages</Link></Menu.Item>\r\n                  </SubMenu>\r\n                  <SubMenu\r\n                    key=\"sub2\"\r\n                    icon={<LaptopOutlined />}\r\n                    title=\"Users\"\r\n                  >\r\n                    <Menu.Item key=\"5\"><Link to='/users'>Users</Link></Menu.Item>\r\n                  </SubMenu>\r\n                </Menu>\r\n              </Sider>\r\n              <Content style={{ padding: \"0 24px\", minHeight: 280 }}>\r\n                  <Switch>\r\n                    <Route\r\n                      exact\r\n                      path=\"/\"\r\n                      render={() => <Redirect to={\"/profile\"} />}\r\n                    />\r\n                    <Route path=\"/dialogs\">\r\n                      <Suspense fallback={<Preloader />}>\r\n                        <DialogsContainer />\r\n                      </Suspense>\r\n                    </Route>\r\n                    <Route path=\"/profile/:userId?\">\r\n                      <Suspense fallback={<Preloader />}>\r\n                        <ProfileContainer />\r\n                      </Suspense>\r\n                    </Route>\r\n                    <Route path=\"/users\">\r\n                      <UsersPage />\r\n                    </Route>\r\n                    <Route path=\"/login\">\r\n                      <Login />\r\n                    </Route>\r\n                    <Route path=\"/chat\">\r\n                      <Suspense fallback={<Preloader />}>\r\n                        <ChatPage />\r\n                      </Suspense>\r\n                    </Route>\r\n                    <Route path=\"/news\" component={News} />\r\n                    <Route path=\"/music\" component={Music} />\r\n                    <Route path=\"/settings\" component={Settings} />\r\n\r\n                    <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\r\n                  </Switch>\r\n\r\n              </Content>\r\n            </Layout>\r\n          </Content>\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n            Social Network ©2021 Created by David Pehshvelashvili\r\n          </Footer>\r\n        </Layout>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\nconst AppContainer = compose(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App);\r\n\r\nconst AppWrapper = (props) => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nexport default AppWrapper;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppWrapper from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n   <AppWrapper />, document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1bVOi\",\"error\":\"FormsControls_error__2EeYv\",\"formSummaryError\":\"FormsControls_formSummaryError__3C8Gs\"};","export default __webpack_public_path__ + \"static/media/snpreloader.1056300a.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/images/snpreloader.svg'\r\n\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt='Loading...'/>\r\n    </div>\r\n}"],"sourceRoot":""}