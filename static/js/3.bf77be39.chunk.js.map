{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","Post","postmsg","likesCount","className","src","alt","type","id","MyPosts","memo","postData","addPost","postsElements","map","p","AddNewPostFormRedux","onSubmit","values","newPostText","maxLength10","maxLengthCreator","Textarea","Element","reduxForm","form","handleSubmit","Field","component","name","validate","required","MyPostsContainer","profilePage","dispatch","addPostActionCreator","connector","ProfileStatus","status","updateStatus","useState","editMode","setEditMode","inputValue","setInputValue","useEffect","autoFocus","value","onChange","e","currentTarget","onBlur","onDoubleClick","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","Preloader","profilePhoto","photos","large","mockPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.bf77be39.chunk.js","sourcesContent":["import { ComponentType } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AppStateType } from \"../redux/redux-store\"\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = <P extends object>(Component: ComponentType<P>) => {\r\n    const RedirectComponent = (props: any) => {\r\n        if (!props.isAuth) return <Redirect to='/login' />\r\n        return <Component {...props} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react'\r\nimport './Post.css'\r\n\r\ntype PostType = {\r\n  postmsg: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post = ({postmsg, likesCount}: PostType) => {\r\n  return (\r\n    <div className='posts'>\r\n      <div className='post-item'>\r\n        <img src='https://i.pinimg.com/originals/ca/0e/b6/ca0eb690fd46ac38e4f26a53718d39bb.jpg' alt='avatar'></img>\r\n        {postmsg}\r\n        <div className ='like_item'>\r\n          <input type='image' id='like_img' src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ2fYWDbwgl4yhQiy2bqCfH21uWM2OGFxHtBA&usqp=CAU' alt='image'></input>\r\n          {likesCount}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Post","import React, { memo } from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators'\r\nimport { Element } from '../../common/FormsControls/FormsControls'\r\nimport './MyPosts.css'\r\nimport { MyPostsConnectorPropsType } from './MyPostsContainer'\r\nimport Post from './Post/Post'\r\n\r\nconst MyPosts = memo(({postData, addPost}: MyPostsConnectorPropsType) => {\r\n  let postsElements =\r\n      postData.map( p => <Post key={p.id} postmsg={p.postmsg} likesCount={p.likesCount} />)\r\n\r\n  let onAddPost = (values: any) => {\r\n    addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className='posts_block'>\r\n      <div>\r\n        <h2>My post</h2>\r\n          <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className='posts'>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nconst maxLength10 =  maxLengthCreator(10)\r\nconst Textarea = Element('textarea')\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field component={Textarea} name={'newPostText'}\r\n             validate={[required, maxLength10]}/>\r\n      <button>Add post</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: 'newPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts","import React, { Dispatch } from 'react'\r\nimport MyPosts from './MyPosts'\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer'\r\nimport { connect, ConnectedProps } from 'react-redux' \r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n      postData: state.profilePage.postData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n      addPost: (newPostText: string) => {\r\n        dispatch(addPostActionCreator(newPostText))\r\n      }\r\n\r\n    }\r\n}\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)\r\n\r\nexport type MyPostsConnectorPropsType = ConnectedProps<typeof connector>\r\n\r\nconst MyPostsContainer = connector(MyPosts)\r\n\r\nexport default MyPostsContainer","import React, { ChangeEvent, useEffect, useState } from 'react'\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = ({ status, updateStatus }: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>(status)\r\n\r\n    const onInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(inputValue)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInputValue(status)\r\n    }, [status])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode\r\n                    ? <div>\r\n                        <span onDoubleClick={activateEditMode}>\r\n                            <b>Status</b>: {status || 'Im an empty status'}\r\n                        </span>\r\n                    </div>\r\n                    : <div>\r\n                        <input autoFocus\r\n                            value={inputValue}\r\n                            onChange={onInputChangeHandler}\r\n                            onBlur={deactivateEditMode} />\r\n                    </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import { FC } from \"react\"\r\nimport { reduxForm } from \"redux-form\"\r\nimport { createField, Input, Textarea } from '../../../common/FormsControls/FormsControls'\r\nimport './../ProfileInfo.css'\r\nimport style from '../../../common/FormsControls/FormsControls.module.css'\r\n\r\ntype ProfileDataFormType = {\r\n  handleSubmit: () => void\r\n  profile: any\r\n  error: any\r\n}\r\n\r\nconst ProfileDataForm: FC<ProfileDataFormType> = ({handleSubmit, profile, error}) => {\r\n\r\n  return <form onSubmit={handleSubmit}>\r\n    <div><button>save</button></div>\r\n    {error && <div className={style.formSummaryError}>{error}</div>}\r\n    <b>Full Name</b>: {createField('Full name', 'fullName', [], Input)}<br />\r\n    <div>\r\n      <b>Looking for a Job</b>: {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n    </div>\r\n\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n      </div>\r\n\r\n    <div>\r\n      <b>About me</b>:\r\n      {createField('About me', 'aboutMe', [], Textarea)}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <div key={key} className='contact'>\r\n          <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n        </div>\r\n      })}\r\n    </div>\r\n\r\n\r\n  </form>\r\n}\r\n\r\n//@ts-ignore\r\nconst ProfileDataFormReduxForm = reduxForm<{}, Props>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { useState } from 'react'\r\nimport { ProfileType } from '../../../types/types'\r\nimport { Preloader } from '../../common/Preloader/Preloader'\r\nimport './ProfileInfo.css'\r\nimport mockPhoto from '../../../assets/images/usermockpng.png'\r\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus'\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\r\n\r\ntype ProfileInfoPropsType = {\r\n  savePhoto: (photo: any) => void\r\n  isOwner: boolean\r\n  profile: any\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: any) => {\r\n\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: any) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: any) => {\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n\r\n\r\n  const profilePhoto = props.profile.photos.large || mockPhoto\r\n  return (\r\n    <div>\r\n      <div className='description_block'>\r\n        <img src={profilePhoto} alt='profilePhoto' />\r\n        {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode\r\n          ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n          : <ProfileData profile={props.profile}\r\n            isOwner={props.isOwner}\r\n            goToEditMode={() => setEditMode(true)} />}\r\n\r\n\r\n        <ProfileStatus {...props} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }: { profile: any, isOwner: boolean, goToEditMode: () => void }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full Name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a Job</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n    <div>\r\n      <b>About me</b>: {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n      <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key}\r\n          contactValue={profile.contacts[key]}/>\r\n      })}\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }: { contactTitle: any, contactValue: any }) => {\r\n  return <div className='contact'><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport './Profile.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\ntype ProfilePropsType = {\r\n  isOwner: boolean\r\n  profile: any\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (photo: any) => void\r\n  saveProfile: (formData: any) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo {...props}/>\r\n      <MyPostsContainer  />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Profile","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer'\r\nimport Profile from './Profile'\r\nimport './Profile.css'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\ntype ProfileContainerType = {\r\n    saveProfile: (formData: any) => void\r\n    savePhoto: (photo: any) => void\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    profile: any\r\n    status: string\r\n    authorizedUserId: any\r\n} & RouteComponentProps<any>\r\n\r\nclass ProfileContainer extends Component<ProfileContainerType> {\r\n\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId\r\n    if(!userId) {\r\n      userId = this.props.authorizedUserId\r\n      if(!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n\r\n    }\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n}\r\n\r\n\r\n  componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\r\n    if ( this.props.match.params.userId !== prevProps.match.params.userId){\r\n    this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n      return (\r\n        <div>\r\n          <Profile\r\n          isOwner={!this.props.match.params.userId}\r\n          { ...this.props } />\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}